#define SCANNERMOTOR OUT_A
#define SCANNORMOTORDIPANGLE 73
#define SCANNERSENSOR S1
#define SCANNERTHRESHOLD 35
//#define DEBUGSENSOR

#define WRITEMOTOR OUT_B


#define TAPEMOTOR OUT_C
#define TAPEMOTORANGLE ((8*360) + 155)

#define JMP 1
#define WRITE 2
#define MOVE 3


byte readBit() {
	RotateMotor(SCANNERMOTOR, 20, -SCANNORMOTORDIPANGLE);
	Wait(200);

	SetSensorColorGreen(SCANNERSENSOR);
	ResetSensor(SCANNERSENSOR);
	unsigned int val = Sensor(SCANNERSENSOR);
#ifdef DEBUGSENSOR
	TextOut(15, LCD_LINE2, StrCat("RAW: ", NumToStr(val)));	
#endif
	SetSensorColorNone(SCANNERSENSOR);
	ResetSensor(SCANNERSENSOR);

	RotateMotor(SCANNERMOTOR, 30, SCANNORMOTORDIPANGLE);
	Wait(10);
	return val < SCANNERTHRESHOLD ? 1 : 0;
}

inline void incrementTapePosition() {
	RotateMotor(TAPEMOTOR, 80, -TAPEMOTORANGLE);	
}
inline void decrementTapePosition() {
	RotateMotor(TAPEMOTOR, 80, TAPEMOTORANGLE);	
}

inline void write1() {
	RotateMotor(WRITEMOTOR, 20, -180);
}
inline void write0() {
	RotateMotor(WRITEMOTOR, 20, 180);
}

inline int getLineCount(string fileName) {
	byte fid;
	int fileSize;
	if (OpenFileRead(fileName, fileSize, fid) == LDR_SUCCESS) {
		int lineCount = 0;
		while (true) {
			string line;
			if (ReadLnString(fid, line) == LDR_SUCCESS) {
				lineCount++;
			}
			else {
				break;
			}
		}
		CloseFile(fid);
		return lineCount;
	}
	else {
		return 0;
	}
}


inline void readLines(string fileName, string &lines[]) {
	int lineCount = getLineCount(fileName);
	TextOut(1, LCD_LINE4, StrCat("lines:  ", NumToStr(lineCount)));
	ArrayInit(lines, "", lineCount);

	if (lineCount > 0) {
		byte fid;
		int fileSize;
		if (OpenFileRead(fileName, fileSize, fid) == LDR_SUCCESS) {
			for (unsigned int i=0; i < lineCount; i++) {
				string line;
				ReadLnString(fid, line);
				lines[i] = line;
				TextOut(1, LCD_LINE5, StrCat("read:  ", lines[i]));
				Wait(100);
			}
			CloseFile(fid);
		}
	}
}

task main() {
	string instructions[];
	string fileName = "bitflipper.txt";
	readLines(fileName, instructions);
	unsigned int IP = 0;
	unsigned int programSize = ArrayLen(instructions);
	while (IP < programSize) {
		string currentInstruction = instructions[IP];
		TextOut(1, LCD_LINE2, StrCat("IP:  ", NumToStr(IP)));
		TextOut(1, LCD_LINE3, StrCat("CMD: ", currentInstruction));
		if (currentInstruction[0] == 'J') {
			bool doJmp = false;
			if (currentInstruction[1] == '_') {
				doJmp = true;
			}
			else if (currentInstruction[1] == '1' ){
				doJmp = readBit() == 1;
			}
			else {
				doJmp = readBit() == 0;
			}
			if (doJmp) {
				string number = SubStr(currentInstruction, 2, StrLen(currentInstruction) - 2);
				string rest;
				IP = strtol(number, rest) - 1;
			}
			else {
				IP++;
			}
		}
		else if (currentInstruction[0] == 'M') {
			if (currentInstruction[1] == 'F') {
				incrementTapePosition();
			}
			else {
				decrementTapePosition();
			}
			IP++;
		}
		else if (currentInstruction[0] == 'W') {
			if (currentInstruction[1] == '1') {
				write1();
			}
			else {
				write0();
			}
			IP++;
		}
		else{
			TextOut(1, LCD_LINE1, StrCat("Error: ", currentInstruction));
		}
	}
	TextOut(1, LCD_LINE1, "End reached");
	Wait(4000);	
}
