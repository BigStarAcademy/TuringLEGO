#define SCANNERMOTOR OUT_A
#define SCANNORMOTORDIPANGLE 73
#define SCANNERSENSOR S1
#define SCANNERTHRESHOLD 35
//#define DEBUGSENSOR

#define WRITEMOTOR OUT_B


#define TAPEMOTOR OUT_C
#define TAPEMOTORANGLE ((8*360) + 155)

#define JMP 1
#define WRITE 2
#define MOVE 3


byte readBit() {
	RotateMotor(SCANNERMOTOR, 20, -SCANNORMOTORDIPANGLE);
	Wait(200);

	SetSensorColorGreen(SCANNERSENSOR);
	ResetSensor(SCANNERSENSOR);
	unsigned int val = Sensor(SCANNERSENSOR);
#ifdef DEBUGSENSOR
	TextOut(15, LCD_LINE2, StrCat("RAW: ", NumToStr(val)));	
#endif
	SetSensorColorNone(SCANNERSENSOR);
	ResetSensor(SCANNERSENSOR);

	RotateMotor(SCANNERMOTOR, 30, SCANNORMOTORDIPANGLE);
	Wait(10);
	return val < SCANNERTHRESHOLD ? 1 : 0;
}

inline void incrementTapePosition() {
	RotateMotor(TAPEMOTOR, 80, -TAPEMOTORANGLE);	
}
inline void decrementTapePosition() {
	RotateMotor(TAPEMOTOR, 80, TAPEMOTORANGLE);	
}

inline void write1() {
	RotateMotor(WRITEMOTOR, 20, -180);
}
inline void write0() {
	RotateMotor(WRITEMOTOR, 20, 180);
}

inline int getLineCount(string fileName) {
	byte fid = fopen(fileName, "r");
	int lineCount = 0;
	while (true) {
		string line;
		fgets(line, 20, fid);
		lineCount++;
		unsigned int strLen = StrLen(line);
		if (line[strLen] != '\n') 
			break;
	}
	fclose(fid);
	return lineCount;
}

inline void getLines(string fileName, string &lines[]) {
	int lineCount = getLineCount(fileName);
	byte fid = fopen(fileName, "r");
	ArrayInit(lines, "", lineCount);
	for (int i=0; i < lineCount; i++) {
		string line;
		fgets(line, 20, fid);
		lines[i] = line;
	}
	fclose(fid);
}

task main() {
	string instructions[];
	getLines("bitflip.tur", instructions);
	unsigned int IP = 0;
	unsigned int programSize = ArrayLen(instructions);
	while (IP < programSize) {
		string currentInstruction = instructions[IP];
		TextOut(1, LCD_LINE2, StrCat("IP:  ", NumToStr(IP)));
		TextOut(1, LCD_LINE3, StrCat("CMD: ", currentInstruction));
		if (currentInstruction[0] == 'J') {
			bool doJmp = false;
			if (currentInstruction[1] == '_') {
				doJmp = true;
			}
			else if (currentInstruction[1] == '1' ){
				doJmp = readBit() == 1;
			}
			else {
				doJmp = readBit() == 0;
			}
			if (doJmp) {
				string number = SubStr(currentInstruction, 2, StrLen(currentInstruction) - 2);
				string rest;
				IP = strtol(number, rest) - 1;
			}
			else {
				IP++;
			}
		}
		else if (currentInstruction[0] == 'M') {
			if (currentInstruction[1] == 'F') {
				incrementTapePosition();
			}
			else {
				decrementTapePosition();
			}
			IP++;
		}
		else if (currentInstruction[0] == 'W') {
			if (currentInstruction[1] == '1') {
				write1();
			}
			else {
				write0();
			}
			IP++;
		}
		else{
			TextOut(1, LCD_LINE1, StrCat("Error: ", currentInstruction));
		}
	}
	TextOut(1, LCD_LINE1, "End reached");

}
